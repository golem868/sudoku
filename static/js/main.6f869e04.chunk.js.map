{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","tempClassName","isAnswer","isSelected","className","onClick","value","Board","state","selectedSquare","y","k","this","setState","e","selectedRow","selectedCol","keyCode","onKeyPress","map","x","toString","includes","key","num","parseInt","questionGrid","info","answerGrid","row","col","temp","j","onKeyUp","handleKeyUp","renderGrid","React","Component","Game","puzzle","Array","fill","Valid","length","dimLength","Math","sqrt","rangeArray","from","keys","constraints","i","uniqueCover","z","rowCover","colCover","gridCover","floor","data","concat","initialInput","filter","exactCoverProb","reduceToExactCover","answer","require","findOne","flatMap","puz","forEach","element","split","number","complete","handleValueChange","resolveClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f869e04.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nfunction Square(props) {\n  let tempClassName = \"square\";\n  if (props.isAnswer) tempClassName += \" red\";\n  if (props.isSelected) tempClassName += \" focus\";\n  return (\n    <button className={tempClassName} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSquare: [-1, -1]\n    };\n  }\n  onClick(y, k) {\n    this.setState({ selectedSquare: [y, k] });\n  }\n  handleKeyUp(e) {\n    const [selectedRow, selectedCol] = this.state.selectedSquare;\n    if (selectedRow === -1 || selectedCol === -1) return;\n    // handle Backspace\n    if (e.keyCode === 8) {\n      this.props.onKeyPress(-1, selectedRow, selectedCol);\n    }\n    const numList = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(x => x.toString());\n    if (!numList.includes(e.key)) return;\n    const num = parseInt(e.key);\n\n    this.props.onKeyPress(num, selectedRow, selectedCol);\n  }\n  renderGrid() {\n    const questionGrid = this.props.info.questionGrid;\n    const answerGrid = this.props.info.answerGrid;\n    const isSelected = (row, col) => {\n      const [selectedRow, selectedCol] = this.state.selectedSquare;\n      return row === selectedRow && col === selectedCol;\n    };\n    const formSquare = (x, y) => {\n      const temp = x.map((j, k) => (\n        <Square\n          key={\"Row\" + y + \" Col\" + k}\n          onClick={() => this.onClick(y, k)}\n          isAnswer={questionGrid[y][k] === 0 ? true : false}\n          isSelected={isSelected(y, k)}\n          value={j === 0 ? null : j}\n        />\n      ));\n      return (\n        <div className=\"board-row\" key={\"row\" + y}>\n          {temp}\n        </div>\n      );\n    };\n    const visual = answerGrid.map(formSquare);\n    return visual;\n  }\n  render() {\n    return (\n      <div className=\"board\" onKeyUp={e => this.handleKeyUp(e)}>\n        {this.renderGrid()}\n      </div>\n    );\n  }\n}\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      puzzle: {\n        questionGrid: new Array(9).fill(0).map(x => new Array(9).fill(0)),\n        answerGrid: new Array(9).fill(0).map(x => new Array(9).fill(0))\n      },\n      Valid: true //Indicate if the sudoku is solvable\n    };\n  }\n  reduceToExactCover() {\n    const puzzle = this.state.puzzle;\n    const length = this.props.length;\n\n    const dimLength = Math.sqrt(length);\n    const rangeArray = Array.from(Array(length).keys());\n    let constraints = new Array(length * length * length);\n    for (let i of rangeArray) {\n      //Row change\n      for (let j of rangeArray) {\n        // Column change\n        for (let k of rangeArray) {\n          // Number change\n          const uniqueCover = Array(length * length)\n            .fill(0)\n            .map((z, x) => (x === i * length + j ? 1 : 0));\n          const rowCover = Array(length * length)\n            .fill(0)\n            .map((z, x) => (x === i * length + k ? 1 : 0));\n          const colCover = Array(length * length)\n            .fill(0)\n            .map((z, x) => (x === j * length + k ? 1 : 0));\n          const gridCover = Array(length * length)\n            .fill(0)\n            .map((z, x) => {\n              const [dimI, dimJ] = [\n                Math.floor(i / dimLength),\n                Math.floor(j / dimLength)\n              ];\n              return x === dimI * length * dimLength + dimJ * length + k\n                ? 1\n                : 0;\n            });\n          //data: Row i,Col j, value k\n          constraints[i * length * length + j * length + k] = {\n            data: `${i},${j},${k}`,\n            row: uniqueCover.concat(rowCover, colCover, gridCover)\n          };\n        }\n      }\n    }\n    //filter out the initial values\n    const initialInput = constraints.filter((z, x) =>\n      puzzle.questionGrid[Math.floor(x / length / length)][\n        Math.floor((x % (length * length)) / length)\n      ] ===\n      (x % length) + 1\n        ? true\n        : false\n    );\n    return constraints\n      .filter((z, x) =>\n        puzzle.questionGrid[Math.floor(x / length / length)][\n          Math.floor((x % (length * length)) / length)\n        ] === 0\n          ? true\n          : false\n      )\n      .concat(initialInput);\n  }\n  resolveClick() {\n    const exactCoverProb = this.reduceToExactCover();\n    //produce one sudoku Result visually\n    const dlx = require(\"dancing-links\");\n    const answer = dlx.findOne(exactCoverProb).flatMap(x => x);\n    if (answer.length === 0) {\n      this.setState({\n        Valid: false\n      });\n      return;\n    }\n    let puz = this.state.puzzle;\n\n    answer.forEach(element => {\n      const [i, j, k] = element.data.split(\",\").map(x => parseInt(x));\n      puz.answerGrid[i][j] = k + 1;\n    });\n    this.setState({\n      puzzle: puz,\n      Valid: true\n    });\n  }\n  handleValueChange(number, row, col) {\n    const puz = this.state.puzzle;\n    puz.questionGrid[row][col] = number === -1 ? 0 : number;\n    puz.answerGrid[row][col] = number === -1 ? 0 : number;\n    this.setState({\n      puzzle: puz\n    });\n  }\n  render() {\n    const complete = this.state.Valid ? \"\" : \"No Solutions!\";\n    const useDefaultSudoku = () => {\n      this.setState({\n        puzzle: {\n          questionGrid: [\n            [0, 0, 0, 6, 9, 8, 4, 5, 3],\n            [9, 5, 0, 0, 1, 7, 8, 6, 2],\n            [0, 0, 3, 0, 5, 0, 1, 9, 0],\n            [1, 6, 7, 0, 0, 0, 0, 3, 8],\n            [8, 2, 5, 7, 0, 0, 9, 1, 0],\n            [3, 0, 9, 8, 2, 1, 5, 0, 0],\n            [0, 7, 0, 5, 0, 0, 3, 0, 1],\n            [5, 0, 1, 0, 0, 4, 6, 8, 0],\n            [4, 9, 0, 0, 3, 0, 7, 0, 5]\n          ],\n          answerGrid: [\n            [0, 0, 0, 6, 9, 8, 4, 5, 3],\n            [9, 5, 0, 0, 1, 7, 8, 6, 2],\n            [0, 0, 3, 0, 5, 0, 1, 9, 0],\n            [1, 6, 7, 0, 0, 0, 0, 3, 8],\n            [8, 2, 5, 7, 0, 0, 9, 1, 0],\n            [3, 0, 9, 8, 2, 1, 5, 0, 0],\n            [0, 7, 0, 5, 0, 0, 3, 0, 1],\n            [5, 0, 1, 0, 0, 4, 6, 8, 0],\n            [4, 9, 0, 0, 3, 0, 7, 0, 5]\n          ]\n        }\n      });\n    };\n    const clearSudoku = () => {\n      this.setState({\n        puzzle: {\n          questionGrid: new Array(9).fill(0).map(x => new Array(9).fill(0)),\n          answerGrid: new Array(9).fill(0).map(x => new Array(9).fill(0))\n        }\n      });\n    };\n    return (\n      <div className=\"game\">\n        <Board\n          info={this.state.puzzle}\n          onKeyPress={(num, row, col) => this.handleValueChange(num, row, col)}\n        />\n        <div className=\"sideBar\">\n          <button className=\"defaultSudoku\" onClick={useDefaultSudoku}>\n            Try with default one!\n          </button>\n          <button className=\"clearSudoku\" onClick={clearSudoku}>\n            Clear the board!\n          </button>\n          <button className=\"click\" onClick={() => this.resolveClick()}>\n            Resolve It!\n          </button>\n          <span>{complete}</span>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Game length={9} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}