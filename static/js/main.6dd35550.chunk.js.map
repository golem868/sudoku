{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","textInput","React","createRef","tempClassName","isAnswer","isSelected","isValid","className","ref","onClick","current","focus","value","Board","state","selectedSquare","previousNumber","y","k","this","setState","row","col","number","questionGrid","info","filter","x","length","map","filterNonSubGrid","dimLength","Math","sqrt","startIndex","floor","Array","fill","i","rowsToTake","colsToTake","_","includes","flatMap","e","selectedRow","selectedCol","keyCode","onKeyPress","toString","key","num","parseInt","answerGrid","previousRow","previousCol","previousNum","validNumber","userInputIsValid","startingRowIndex","startingColIndex","temp","j","onKeyUp","handleKeyUp","renderGrid","Component","Game","puzzle","Valid","rangeArray","from","keys","constraints","uniqueCover","z","rowCover","colCover","gridCover","data","concat","initialInput","exactCoverProb","reduceToExactCover","answer","require","findOne","puz","forEach","element","split","complete","handleValueChange","resolveClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAEA,SAASA,EAAOC,GACd,IAAIC,EAAYC,IAAMC,YAClBC,EAAgB,SAChBJ,EAAMK,WAAUD,GAAiB,QACjCJ,EAAMM,aAAYF,GAAiB,UAClCJ,EAAMO,UAASH,GAAiB,YAKrC,OACE,4BAAQI,UAAWJ,EAAeK,IAAKR,EAAWS,QALpC,WACdT,EAAUU,QAAQC,QAClBZ,EAAMU,YAIHV,EAAMa,O,IAIPC,E,YACJ,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXC,eAAgB,EAAE,GAAI,GACtBC,eAAgB,EAAE,GAAI,GAAI,IAJX,E,qEAOXC,EAAGC,GACTC,KAAKC,SAAS,CAAEL,eAAgB,CAACE,EAAGC,O,uCAOrBG,EAAKC,EAAKC,GAAS,IAAD,OAC3BC,EAAeL,KAAKpB,MAAM0B,KAAKD,aAGrC,GADmBA,EAAaH,GACjBK,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,KAAQK,OAAS,EAAG,OAAO,EAG5D,GADmBJ,EAAaK,KAAI,SAAAF,GAAC,OAAIA,EAAEL,MAC5BI,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,KAAQK,OAAS,EAAG,OAAO,EAG5D,IAAME,EAAmB,SAAAP,GACvB,IAAMQ,EAAYC,KAAKC,KAAK,EAAKlC,MAAM0B,KAAKD,aAAaI,QACnDM,EAAaF,KAAKG,MAAMZ,EAASQ,GAAaA,EACpD,OAAO,IAAIK,MAAML,GAAWM,KAAK,GAAGR,KAAI,SAACF,EAAGW,GAAJ,OAAUJ,EAAaI,MAE3DC,EAAaT,EAAiBT,GAC9BmB,EAAaV,EAAiBR,GAOpC,OANoBE,EAEjBE,QAAO,SAACe,EAAGH,GAAJ,OAAUC,EAAWG,SAASJ,MAErCZ,QAAO,SAAAC,GAAC,OAAIA,EAAED,QAAO,SAACe,EAAGH,GAAJ,OAAUE,EAAWE,SAASJ,SACnDK,SAAQ,SAAAhB,GAAC,OAAIA,KACAD,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,KAAQK,OAAS,EAAU,EACtD,I,kCAEGgB,GAAI,IAAD,cACsBzB,KAAKL,MAAMC,eADjC,GACN8B,EADM,KACOC,EADP,KAEPlB,EAAST,KAAKpB,MAAM0B,KAAKD,aAAaI,OAC5C,IAAqB,IAAjBiB,IAAuC,IAAjBC,IAER,IAAdF,EAAEG,SACJ5B,KAAKpB,MAAMiD,WAAWH,EAAaC,GAAc,GAEnC,IAAIV,MAAMR,GAAQS,KAAK,GAAGR,KAAI,SAACF,EAAGW,GAAJ,OAAWA,EAAI,GAAGW,cACnDP,SAASE,EAAEM,MAAxB,CACA,IAAMC,EAAMC,SAASR,EAAEM,KACvB/B,KAAKC,SAAS,CAAEJ,eAAgB,CAAC6B,EAAaC,EAAaK,KAC3DhC,KAAKpB,MAAMiD,WAAWH,EAAaC,EAAaK,M,mCAEpC,IAAD,OACL3B,EAAeL,KAAKpB,MAAM0B,KAAKD,aAC/B6B,EAAalC,KAAKpB,MAAM0B,KAAK4B,WAFxB,cAGqClC,KAAKL,MAAME,eAHhD,GAGJsC,EAHI,KAGSC,EAHT,KAGsBC,EAHtB,KAIPC,EAAc,EACdH,IAAgBC,IAAgC,IAAjBD,IAGjCG,EAActC,KAAKuC,iBACjBJ,EACAC,EACAC,IAGJ,IAAMlD,EAAU,SAACe,EAAKC,GACpB,OAAQmC,GACN,KAAK,EACH,OAAO,EACT,KAAK,EACH,QAASpC,IAAQiC,GACnB,KAAK,EACH,QAAShC,IAAQiC,GACnB,KAAK,EACH,IAAMxB,EAAYC,KAAKC,KAAK,EAAKlC,MAAM0B,KAAKD,aAAaI,QACnD+B,EACJ3B,KAAKG,MAAMmB,EAAcvB,GAAaA,EAClC6B,EACJ5B,KAAKG,MAAMoB,EAAcxB,GAAaA,EACxC,QACEV,GAAOsC,GACPtC,EAAMsC,EAAmB5B,GACzBT,GAAOsC,GACPtC,EAAMsC,EAAmB7B,GAE7B,QACE,OAAO,IAGP1B,EAAa,SAACgB,EAAKC,GAAS,IAAD,cACI,EAAKR,MAAMC,eADf,GACxB8B,EADwB,KACXC,EADW,KAE/B,OAAOzB,IAAQwB,GAAevB,IAAQwB,GAoBxC,OADeO,EAAWxB,KAjBP,SAACF,EAAGV,GACrB,IAAM4C,EAAOlC,EAAEE,KAAI,SAACiC,EAAG5C,GAAJ,OACjB,kBAACpB,EAAD,CACEoD,IAAK,MAAQjC,EAAI,OAASC,EAC1BT,QAAS,kBAAM,EAAKA,QAAQQ,EAAGC,IAC/BZ,QAASA,EAAQW,EAAGC,GACpBd,SAAiC,IAAvBoB,EAAaP,GAAGC,GAC1Bb,WAAYA,EAAWY,EAAGC,GAC1BN,MAAa,IAANkD,EAAU,KAAOA,OAG5B,OACE,yBAAKvD,UAAU,YAAY2C,IAAK,MAAQjC,GACrC4C,Q,+BAOC,IAAD,OACP,OACE,yBAAKtD,UAAU,QAAQwD,QAAS,SAAAnB,GAAC,OAAI,EAAKoB,YAAYpB,KACnDzB,KAAK8C,kB,GAzHMhE,IAAMiE,WA2SXC,E,YAnKb,WAAYpE,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXsD,OAAQ,CACN5C,aAAc,IAAIY,MAAM,GAAGC,KAAK,GAAGR,KAAI,SAAAF,GAAC,OAAI,IAAIS,MAAM,GAAGC,KAAK,MAC9DgB,WAAY,IAAIjB,MAAM,GAAGC,KAAK,GAAGR,KAAI,SAAAF,GAAC,OAAI,IAAIS,MAAM,GAAGC,KAAK,OAE9DgC,OAAO,GAPQ,E,kFAiBjB,IANA,IAAMD,EAASjD,KAAKL,MAAMsD,OACpBxC,EAAST,KAAKpB,MAAM6B,OAEpBG,EAAYC,KAAKC,KAAKL,GACtB0C,EAAalC,MAAMmC,KAAKnC,MAAMR,GAAQ4C,QACxCC,EAAc,IAAIrC,MAAMR,EAASA,EAASA,GAN3B,aAOd,IAAIU,EAAC,KAPS,uBASjB,IATiB,IASjB,EATiB,iBASRwB,EATQ,+BAWf,IAXe,IAWf,EAXe,iBAWN5C,EAXM,QAaPwD,EAActC,MAAMR,EAASA,GAChCS,KAAK,GACLR,KAAI,SAAC8C,EAAGhD,GAAJ,OAAWA,IAAMW,EAAIV,EAASkC,EAAI,EAAI,KACvCc,EAAWxC,MAAMR,EAASA,GAC7BS,KAAK,GACLR,KAAI,SAAC8C,EAAGhD,GAAJ,OAAWA,IAAMW,EAAIV,EAASV,EAAI,EAAI,KACvC2D,EAAWzC,MAAMR,EAASA,GAC7BS,KAAK,GACLR,KAAI,SAAC8C,EAAGhD,GAAJ,OAAWA,IAAMmC,EAAIlC,EAASV,EAAI,EAAI,KACvC4D,EAAY1C,MAAMR,EAASA,GAC9BS,KAAK,GACLR,KAAI,SAAC8C,EAAGhD,GAAO,IAAD,EACQ,CACnBK,KAAKG,MAAMG,EAAIP,GACfC,KAAKG,MAAM2B,EAAI/B,IAEjB,OAAOJ,IALM,KAKOC,EAASG,EALhB,KAKmCH,EAASV,EACrD,EACA,KAGRuD,EAAYnC,EAAIV,EAASA,EAASkC,EAAIlC,EAASV,GAAK,CAClD6D,KAAK,GAAD,OAAKzC,EAAL,YAAUwB,EAAV,YAAe5C,GACnBG,IAAKqD,EAAYM,OAAOJ,EAAUC,EAAUC,KAzBhD,EAAcR,EAAd,+CAA2B,IAXZ,oFASjB,EAAcA,EAAd,+CAA2B,IATV,oFAOnB,MAAcA,EAAd,eAA2B,IAmC3B,IAAMW,EAAeR,EAAY/C,QAAO,SAACiD,EAAGhD,GAAJ,OACtCyC,EAAO5C,aAAaQ,KAAKG,MAAMR,EAAIC,EAASA,IAC1CI,KAAKG,MAAOR,GAAKC,EAASA,GAAWA,MAEtCD,EAAIC,EAAU,KAIjB,OAAO6C,EACJ/C,QAAO,SAACiD,EAAGhD,GAAJ,OAGA,IAFNyC,EAAO5C,aAAaQ,KAAKG,MAAMR,EAAIC,EAASA,IAC1CI,KAAKG,MAAOR,GAAKC,EAASA,GAAWA,OAKxCoD,OAAOC,K,qCAGV,IAAMC,EAAiB/D,KAAKgE,qBAGtBC,EADMC,EAAQ,IACDC,QAAQJ,GAC3B,GAAsB,IAAlBE,EAAOxD,OAAX,CAOA,IAAI2D,EAAMpE,KAAKL,MAAMsD,OAErBgB,EAAO,GAAGI,SAAQ,SAAAC,GAAY,IAAD,EACTA,EAAQV,KAAKW,MAAM,KAAK7D,KAAI,SAAAF,GAAC,OAAIyB,SAASzB,MADjC,mBACpBW,EADoB,KACjBwB,EADiB,KACd5C,EADc,KAE3BqE,EAAIlC,WAAWf,GAAGwB,GAAK5C,EAAI,KAE7BC,KAAKC,SAAS,CACZgD,OAAQmB,EACRlB,OAAO,SAdPlD,KAAKC,SAAS,CACZiD,OAAO,M,wCAiBKhD,EAAKC,EAAKC,GAC1B,IAAMgE,EAAMpE,KAAKL,MAAMsD,OAEvBmB,EAAI/D,aAAaH,GAAKC,IAAmB,IAAZC,EAAgB,EAAIA,EACjDgE,EAAIlC,WAAWhC,GAAKC,IAAmB,IAAZC,EAAgB,EAAIA,EAC/CJ,KAAKC,SAAS,CACZgD,OAAQmB,M,+BAGF,IAAD,OACDI,EAAWxE,KAAKL,MAAMuD,MAAQ,GAAK,gBAqCzC,OACE,yBAAK9D,UAAU,QACb,kBAAC,EAAD,CACEkB,KAAMN,KAAKL,MAAMsD,OACjBpB,WAAY,SAACG,EAAK9B,EAAKC,GAAX,OAAmB,EAAKsE,kBAAkBzC,EAAK9B,EAAKC,MAElE,yBAAKf,UAAU,WACb,4BAAQA,UAAU,gBAAgBE,QA3Cf,WACvB,EAAKW,SAAS,CACZgD,OAAQ,CACN5C,aAAc,CACZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B6B,WAAY,CACV,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,SAoB3B,yBAGA,4BAAQ9C,UAAU,cAAcE,QAlBlB,WAClB,EAAKW,SAAS,CACZgD,OAAQ,CACN5C,aAAc,IAAIY,MAAM,GAAGC,KAAK,GAAGR,KAAI,SAAAF,GAAC,OAAI,IAAIS,MAAM,GAAGC,KAAK,MAC9DgB,WAAY,IAAIjB,MAAM,GAAGC,KAAK,GAAGR,KAAI,SAAAF,GAAC,OAAI,IAAIS,MAAM,GAAGC,KAAK,WAc5D,oBAGA,4BAAQ9B,UAAU,QAAQE,QAAS,kBAAM,EAAKoF,iBAA9C,eAGA,8BAAOF,S,GA9JE1F,IAAMiE,WC7IL4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,CAAMxE,OAAQ,IAAOyE,SAASC,eAAe,SD6HvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6dd35550.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nfunction Square(props) {\n  let textInput = React.createRef();\n  let tempClassName = \"square\";\n  if (props.isAnswer) tempClassName += \" red\";\n  if (props.isSelected) tempClassName += \" focus\";\n  if (!props.isValid) tempClassName += \" invalid\";\n  const onClick = () => {\n    textInput.current.focus();\n    props.onClick();\n  };\n  return (\n    <button className={tempClassName} ref={textInput} onClick={onClick}>\n      {props.value}\n    </button>\n  );\n}\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSquare: [-1, -1],\n      previousNumber: [-1, -1, -1] // row,col,number\n    };\n  }\n  onClick(y, k) {\n    this.setState({ selectedSquare: [y, k] });\n  }\n\n  //return 0 if valid\n  //       1 if row invalid\n  //       2 if col invalid\n  //       3 if grid invalid\n  userInputIsValid(row, col, number) {\n    const questionGrid = this.props.info.questionGrid;\n    //check for row\n    const orginalRow = questionGrid[row];\n    if (orginalRow.filter(x => x === number).length > 1) return 1;\n    //check for col\n    const orginalCol = questionGrid.map(x => x[col]);\n    if (orginalCol.filter(x => x === number).length > 1) return 2;\n    //check for grid\n    //extension function to return rows / cols (index-wise)to check\n    const filterNonSubGrid = number => {\n      const dimLength = Math.sqrt(this.props.info.questionGrid.length);\n      const startIndex = Math.floor(number / dimLength) * dimLength;\n      return new Array(dimLength).fill(0).map((x, i) => startIndex + i);\n    };\n    const rowsToTake = filterNonSubGrid(row);\n    const colsToTake = filterNonSubGrid(col);\n    const orginalGrid = questionGrid\n      //rows to cover\n      .filter((_, i) => rowsToTake.includes(i))\n      // cols to cover\n      .filter(x => x.filter((_, i) => colsToTake.includes(i)))\n      .flatMap(x => x);\n    if (orginalGrid.filter(x => x === number).length > 1) return 3;\n    return 0;\n  }\n  handleKeyUp(e) {\n    const [selectedRow, selectedCol] = this.state.selectedSquare;\n    const length = this.props.info.questionGrid.length;\n    if (selectedRow === -1 || selectedCol === -1) return;\n    // handle Backspace\n    if (e.keyCode === 8) {\n      this.props.onKeyPress(selectedRow, selectedCol, -1);\n    }\n    const numList = new Array(length).fill(0).map((x, i) => (i + 1).toString());\n    if (!numList.includes(e.key)) return;\n    const num = parseInt(e.key);\n    this.setState({ previousNumber: [selectedRow, selectedCol, num] });\n    this.props.onKeyPress(selectedRow, selectedCol, num);\n  }\n  renderGrid() {\n    const questionGrid = this.props.info.questionGrid;\n    const answerGrid = this.props.info.answerGrid;\n    const [previousRow, previousCol, previousNum] = this.state.previousNumber;\n    let validNumber = 0;\n    if (previousRow === previousCol && previousRow === -1) {\n      //pass\n    } else {\n      validNumber = this.userInputIsValid(\n        previousRow,\n        previousCol,\n        previousNum\n      );\n    }\n    const isValid = (row, col) => {\n      switch (validNumber) {\n        case 0:\n          return true;\n        case 1: //row Invalid\n          return !(row === previousRow);\n        case 2: //col Invalid\n          return !(col === previousCol);\n        case 3: //grid Invalid\n          const dimLength = Math.sqrt(this.props.info.questionGrid.length);\n          const startingRowIndex =\n            Math.floor(previousRow / dimLength) * dimLength;\n          const startingColIndex =\n            Math.floor(previousCol / dimLength) * dimLength;\n          return !(\n            row >= startingRowIndex &&\n            row < startingRowIndex + dimLength &&\n            col >= startingColIndex &&\n            col < startingColIndex + dimLength\n          );\n        default:\n          return true;\n      }\n    };\n    const isSelected = (row, col) => {\n      const [selectedRow, selectedCol] = this.state.selectedSquare;\n      return row === selectedRow && col === selectedCol;\n    };\n    const formSquare = (x, y) => {\n      const temp = x.map((j, k) => (\n        <Square\n          key={\"Row\" + y + \" Col\" + k}\n          onClick={() => this.onClick(y, k)}\n          isValid={isValid(y, k)}\n          isAnswer={questionGrid[y][k] === 0 ? true : false}\n          isSelected={isSelected(y, k)}\n          value={j === 0 ? null : j}\n        />\n      ));\n      return (\n        <div className=\"board-row\" key={\"row\" + y}>\n          {temp}\n        </div>\n      );\n    };\n    const visual = answerGrid.map(formSquare);\n    return visual;\n  }\n  render() {\n    return (\n      <div className=\"board\" onKeyUp={e => this.handleKeyUp(e)}>\n        {this.renderGrid()}\n      </div>\n    );\n  }\n}\n\n/*  7/2/2020: \npossible integration idea \n  1.Show user how many solutions available because ideally u want only one\n  (dancing-links findAll function take too much resource with sparse matrix 12/2/2020 give up)\n  2.Make it compatible with mobile version \n    a) users cant use keyboard to enter number with mobile\n    b) change .css to match size (12/2/2020 done)\n*/\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      puzzle: {\n        questionGrid: new Array(9).fill(0).map(x => new Array(9).fill(0)),\n        answerGrid: new Array(9).fill(0).map(x => new Array(9).fill(0))\n      },\n      Valid: true //Indicate if the sudoku is solvable\n    };\n  }\n  reduceToExactCover() {\n    const puzzle = this.state.puzzle;\n    const length = this.props.length;\n\n    const dimLength = Math.sqrt(length);\n    const rangeArray = Array.from(Array(length).keys());\n    let constraints = new Array(length * length * length);\n    for (let i of rangeArray) {\n      //Row change\n      for (let j of rangeArray) {\n        // Column change\n        for (let k of rangeArray) {\n          // Number change\n          const uniqueCover = Array(length * length)\n            .fill(0)\n            .map((z, x) => (x === i * length + j ? 1 : 0));\n          const rowCover = Array(length * length)\n            .fill(0)\n            .map((z, x) => (x === i * length + k ? 1 : 0));\n          const colCover = Array(length * length)\n            .fill(0)\n            .map((z, x) => (x === j * length + k ? 1 : 0));\n          const gridCover = Array(length * length)\n            .fill(0)\n            .map((z, x) => {\n              const [dimI, dimJ] = [\n                Math.floor(i / dimLength),\n                Math.floor(j / dimLength)\n              ];\n              return x === dimI * length * dimLength + dimJ * length + k\n                ? 1\n                : 0;\n            });\n          //data: Row i,Col j, value k\n          constraints[i * length * length + j * length + k] = {\n            data: `${i},${j},${k}`,\n            row: uniqueCover.concat(rowCover, colCover, gridCover)\n          };\n        }\n      }\n    }\n    //filter out the initial values\n    const initialInput = constraints.filter((z, x) =>\n      puzzle.questionGrid[Math.floor(x / length / length)][\n        Math.floor((x % (length * length)) / length)\n      ] ===\n      (x % length) + 1\n        ? true\n        : false\n    );\n    return constraints\n      .filter((z, x) =>\n        puzzle.questionGrid[Math.floor(x / length / length)][\n          Math.floor((x % (length * length)) / length)\n        ] === 0\n          ? true\n          : false\n      )\n      .concat(initialInput);\n  }\n  resolveClick() {\n    const exactCoverProb = this.reduceToExactCover();\n    //produce one sudoku Result visually\n    const dlx = require(\"dancing-links\");\n    const answer = dlx.findOne(exactCoverProb); //.flatMap(x => x);\n    if (answer.length === 0) {\n      this.setState({\n        Valid: false\n      });\n      return;\n    }\n\n    let puz = this.state.puzzle;\n\n    answer[0].forEach(element => {\n      const [i, j, k] = element.data.split(\",\").map(x => parseInt(x));\n      puz.answerGrid[i][j] = k + 1;\n    });\n    this.setState({\n      puzzle: puz,\n      Valid: true\n    });\n  }\n\n  handleValueChange(row, col, number) {\n    const puz = this.state.puzzle;\n    //-1 indicate user input backspace\n    puz.questionGrid[row][col] = number === -1 ? 0 : number;\n    puz.answerGrid[row][col] = number === -1 ? 0 : number;\n    this.setState({\n      puzzle: puz\n    });\n  }\n  render() {\n    const complete = this.state.Valid ? \"\" : \"No Solutions!\";\n    const useDefaultSudoku = () => {\n      this.setState({\n        puzzle: {\n          questionGrid: [\n            [0, 0, 0, 6, 9, 8, 4, 5, 3],\n            [9, 5, 0, 0, 1, 7, 8, 6, 2],\n            [0, 0, 3, 0, 5, 0, 1, 9, 0],\n            [1, 6, 7, 0, 0, 0, 0, 3, 8],\n            [8, 2, 5, 7, 0, 0, 9, 1, 0],\n            [3, 0, 9, 8, 2, 1, 5, 0, 0],\n            [0, 7, 0, 5, 0, 0, 3, 0, 1],\n            [5, 0, 1, 0, 0, 4, 6, 8, 0],\n            [4, 9, 0, 0, 3, 0, 7, 0, 5]\n          ],\n          answerGrid: [\n            [0, 0, 0, 6, 9, 8, 4, 5, 3],\n            [9, 5, 0, 0, 1, 7, 8, 6, 2],\n            [0, 0, 3, 0, 5, 0, 1, 9, 0],\n            [1, 6, 7, 0, 0, 0, 0, 3, 8],\n            [8, 2, 5, 7, 0, 0, 9, 1, 0],\n            [3, 0, 9, 8, 2, 1, 5, 0, 0],\n            [0, 7, 0, 5, 0, 0, 3, 0, 1],\n            [5, 0, 1, 0, 0, 4, 6, 8, 0],\n            [4, 9, 0, 0, 3, 0, 7, 0, 5]\n          ]\n        }\n      });\n    };\n    const clearSudoku = () => {\n      this.setState({\n        puzzle: {\n          questionGrid: new Array(9).fill(0).map(x => new Array(9).fill(0)),\n          answerGrid: new Array(9).fill(0).map(x => new Array(9).fill(0))\n        }\n      });\n    };\n    return (\n      <div className=\"game\">\n        <Board\n          info={this.state.puzzle}\n          onKeyPress={(num, row, col) => this.handleValueChange(num, row, col)}\n        />\n        <div className=\"sideBar\">\n          <button className=\"defaultSudoku\" onClick={useDefaultSudoku}>\n            Try with default one!\n          </button>\n          <button className=\"clearSudoku\" onClick={clearSudoku}>\n            Clear the board!\n          </button>\n          <button className=\"click\" onClick={() => this.resolveClick()}>\n            Resolve It!\n          </button>\n          <span>{complete}</span>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Game length={9} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}